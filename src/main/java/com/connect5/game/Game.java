package com.connect5.game;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;

import java.util.List;
import java.util.Map;

@DynamoDBTable(tableName = "Game")
public class Game {

    private String gameId;
    private int boardHeight;
    private int boardWidth;
    private Map<String, List<String>> grid;
    private Map<String, String> players;
    private boolean free;
    private String turnToken;
    private int numToConnect;
    private String winner;


    public Game() {
        // Default constructor is required by AWS DynamoDB SDK
    }

    public Game(int boardHeight, int boardWidth, Map<String, List<String>> grid, Map<String, String> player, String turnToken) {
        this.boardHeight = boardHeight;
        this.boardWidth = boardWidth;
        this.grid = grid;
        this.players = player;
        this.free = true;
        this.turnToken = turnToken;
        this.numToConnect = 3;
        this.winner = null;
    }

    public Map<String, List<String>> addDisc (int column, String name) {
        String disc = this.getPlayerDisc(name);
        for (int rowNum = boardHeight - 1; rowNum >= 0; rowNum--) {
            List<String> row = this.grid.get(String.valueOf(rowNum));
            if (row.get(column).equals("*")) {
                row.set(column, disc);
                this.grid.put(String.valueOf(rowNum), row);
                return this.grid;
            }
        }
        return null;
    }

    public boolean validateColumn (int column) {
        for (int rowNum = boardHeight - 1; rowNum >= 0; rowNum--) {
            List<String> row = this.grid.get(String.valueOf(rowNum));
            if (row.get(column).equals("*")) {
                return true;
            }
        }
        return false;
    }

    public boolean checkGameOver() {
        return checkVertWin() || checkHorizonWin() || checkPosDiagWin() || checkNegDiagWin();
    }

    private boolean checkHorizonWin() {
        String disc = this.getPlayerDisc(this.turnToken);
        for (int rowNum = boardHeight - 1; rowNum >= 0; rowNum--) {
            List<String> row = this.grid.get(String.valueOf(rowNum));
            int discsInARow = 0;
            for (int colNum = 0; colNum < row.size(); colNum++) {
                if (row.get(colNum).equals(disc)) {
                    discsInARow++;
                } else {
                    discsInARow = 0;
                }
                if (discsInARow == this.numToConnect) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean checkVertWin() {
        String disc = this.getPlayerDisc(this.turnToken);
        for (int colNum = 0; colNum < boardWidth; colNum++) {
            int discsInARow = 0;
            for (int rowNum = boardHeight - 1; rowNum >= 0; rowNum--) {
                List<String> row = this.grid.get(String.valueOf(rowNum));
                if (row.get(colNum).equals(disc)) {
                    discsInARow++;
                } else {
                    discsInARow = 0;
                }
                if (discsInARow == this.numToConnect) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean checkPosDiagWin() {
        String disc = this.getPlayerDisc(this.turnToken);
        for (int row = this.numToConnect - 1; row < boardHeight; row++) {
            int discsInARow = 0;
            for (int col = 0; col < row + 1; col++) {
                List<String> rowList = this.grid.get(String.valueOf(row - col));
                if (rowList.get(col).equals(disc)) {
                    discsInARow++;
                } else {
                    discsInARow = 0;
                }
                if (discsInARow == this.numToConnect) {
                    return true;
                }
            }
        }

        for (int col = 1; col < boardWidth - (this.numToConnect - 1); col++) {
            int discsInARow = 0;
            for (int row = 0; row < boardHeight; row++) {
                if ( (col + row) < boardHeight) {
                    List<String> rowList = this.grid.get(String.valueOf((boardHeight - 1) - row));
                    if (rowList.get(row+col).equals(disc)) {
                        discsInARow++;
                    } else {
                        discsInARow = 0;
                    }
                    if (discsInARow == this.numToConnect) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean checkNegDiagWin() {
        String disc = this.getPlayerDisc(this.turnToken);
        for (int row = 0; row < boardHeight - this.numToConnect - 1; row++) {
            int discsInARow = 0;
            for (int col = 0; col < boardHeight - row; col++) {
                List<String> rowList = this.grid.get(String.valueOf(row + col));
                if (rowList.get(col).equals(disc)) {
                    discsInARow++;
                } else {
                    discsInARow = 0;
                }
                if (discsInARow == this.numToConnect) {
                    return true;
                }
            }
        }

        for (int col = 1; col < boardWidth - (this.numToConnect - 1); col++) {
            int discsInARow = 0;
            for (int row = 0; row < boardHeight; row++) {
                if ( (col + row) < boardHeight) {
                    List<String> rowList = this.grid.get(String.valueOf(row));
                    if (rowList.get(row+col).equals(disc)) {
                        discsInARow++;
                    } else {
                        discsInARow = 0;
                    }
                    if (discsInARow == this.numToConnect) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return gameId;
    }

    public void setId(String id) {
        this.gameId = id;
    }

    @DynamoDBAttribute
    public int getBoardHeight() {
        return boardHeight;
    }

    public void setBoardHeight(int boardHeight) {
        this.boardHeight = boardHeight;
    }

    @DynamoDBAttribute
    public int getBoardWidth() {
        return boardWidth;
    }

    public void setBoardWidth(int boardWidth) {
        this.boardWidth = boardWidth;
    }

    @DynamoDBAttribute
    public Map<String, List<String>> getGrid() {
        return grid;
    }

    public void setGrid(Map<String, List<String>> grid) {
        this.grid = grid;
    }

    @DynamoDBAttribute
    public Map<String, String> getPlayers() {
        return players;
    }

    public void setPlayers(Map<String, String> players) {
        this.players = players;
    }

    public void addPlayer(String name, String disc) {
        this.players.put(name, disc);
    }

    @DynamoDBAttribute
    public boolean isFree() {
        return free;
    }

    public void setFree(boolean free) {
        this.free = free;
    }

    @DynamoDBAttribute
    public String getTurnToken() {
        return turnToken;
    }

    public void setTurnToken(String turnToken) {
        this.turnToken = turnToken;
    }

    public String getPlayerDisc(String name) {
        return this.players.get(name);
    }

    @DynamoDBAttribute
    public int getNumToConnect() {
        return numToConnect;
    }

    public void setNumToConnect(int numToConnect) {
        this.numToConnect = numToConnect;
    }

    @DynamoDBAttribute
    public String getWinner() {
        return winner;
    }

    public void setWinner(String winner) {
        this.winner = winner;
    }
}